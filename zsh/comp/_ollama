#compdef ollama

# Fetch installed models
_fetch_ollama_models() {
    local -a models
    local output="$(ollama list 2>/dev/null | sed 's/:/\\:/g')"  # Escape colons for zsh
    if [[ -z "$output" ]]; then
        return 1
    fi
    models=("${(@f)$(echo "$output" | awk 'NR>1 {print $1}')}")
    [[ ${#models} -eq 0 ]] && return 1
    echo $models
}

# Fetch running models
_fetch_running_ollama_models() {
    local -a models
    local output="$(ollama ps 2>/dev/null | sed 's/:/\\:/g')"
    if [[ -z "$output" ]]; then
        return 1
    fi
    models=("${(@f)$(echo "$output" | awk 'NR>1 {print $1}')}")
    [[ ${#models} -eq 0 ]] && return 1
    echo $models
}

# Describe installed models
_complete_installed_models() {
    local -a models
    models=($(_fetch_ollama_models))
    (( ${#models} )) && _describe 'installed models' models
}

# Describe running models
_complete_running_models() {
    local -a models
    models=($(_fetch_running_ollama_models))
    (( ${#models} )) && _describe 'running models' models
}

_ollama() {
    local -a commands

    _arguments -C \
        '(-h --help)'{-h,--help}'[Show help information]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '1: :->command' \
        '*:: :->args'

    case $state in
        command)
            commands=(
                'serve:Start ollama'
                'create:Create a model'
                'show:Show information for a model'
                'run:Run a model'
                'stop:Stop a running model'
                'pull:Pull a model from a registry'
                'push:Push a model to a registry'
                'list:List models'
                'ps:List running models'
                'cp:Copy a model'
                'rm:Remove a model'
                'help:Help about any command'
            )
            _describe -t commands 'ollama command' commands
        ;;
        args)
            case $words[1] in
                serve)
                    _arguments \
                        '--host[Specify the host and port]:host and port:' \
                        '--origins[Set allowed origins]:origins:' \
                        '--models[Path to the models directory]:path:_directories' \
                        '--keep-alive[Duration to keep models in memory]:duration:'
                ;;
                create)
                    _arguments \
                        '-f+[Specify the file name]:file:_files'
                ;;
                show)
                    _arguments \
                        '--license[Show license of a model]' \
                        '--modelfile[Show Modelfile of a model]' \
                        '--parameters[Show parameters of a model]' \
                        '--system[Show system message of a model]' \
                        '--template[Show template of a model]' \
                        '*::model:->model'
                    if [[ $state == model ]]; then
                        _complete_installed_models
                    fi
                ;;
                run)
                    _arguments \
                        '--format[Specify the response format]:format:' \
                        '--insecure[Use an insecure registry]' \
                        '--nowordwrap[Disable word wrap]' \
                        '--verbose[Show verbose output]' \
                        '*::model and prompt:->model_and_prompt'
                    if [[ $state == model_and_prompt ]]; then
                        _complete_running_models
                        _complete_installed_models
                        _message "enter prompt"
                    fi
                ;;
                stop)
                    _arguments \
                        '*::running models:->running_models'
                    if [[ $state == running_models ]]; then
                        _complete_running_models
                    fi
                ;;
                pull|push)
                    _arguments \
                        '--insecure[Use an insecure registry]' \
                        '*::model:->model'
                    if [[ $state == model ]]; then
                        _complete_installed_models
                    fi
                ;;
                list)
                    _message "no additional arguments"
                ;;
                ps)
                    _message "no additional arguments (shows running models)"
                ;;
                cp)
                    _arguments \
                        '1:source model:_complete_installed_models' \
                        '2:target model:_complete_installed_models'
                ;;
                rm)
                    _arguments \
                        '*::models:->models'
                    if [[ $state == models ]]; then
                        _complete_installed_models
                    fi
                ;;
                help)
                    _message "no additional arguments"
                ;;
            esac
        ;;
    esac
}

