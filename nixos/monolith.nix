# monolith.nix - Aggregated NixOS configuration (generated by aggregate.sh)
# Generated on Fri Sep 12 03:01:50 PM EEST 2025

# BEGIN /home/elbasel/config/nixos/hardware-configuration.nix
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  networking.useDHCP = lib.mkDefault true;
  hardware.cpu.intel.updateMicrocode = true;
  swapDevices = [ ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "sdhci_pci" "usb_storage" "sd_mod" ];  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@nix" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@home" ];
    };

  fileSystems."/bin" =
    { device = "/usr/bin";
      fsType = "none";
    options = [ "bind" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A60A-EEC2";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;
  # hardware.intel-gpu-tools.enable = true;
  # services.throttled.enable = true;
  # evaluation warning: The option 
  # `hardware.opengl.enable' has been renamed to `hardware.graphics.enable'.
  # hardware.opengl.enable = true;
  # services.undervolt.turbo = 1;
#   hardware.pulseaudio.enable = true;
#   hardware.pulseaudio.support32Bit = true;
#   hardware.pulseaudio.defaultSink = "alsa_output.pci-0000_001f.3.analog-stereo";
#   hardware.bluetooth.enable = true;
#   hardware.bluetooth.autoEnable = true;
#   hardware.wireless.enable = true;
#   hardware.enableRedistributableFirmware = true;
#   hardware.snd-hda-intel.enable = true;
#   hardware.snd-hda-intel.model = "auto";
#   hardware.snd-hda-intel.dmic_detect = 0;
#   hardware.acpi = {
#     enable = true;
#     video = true;
#     thermal = true;
#   };
#   hardware.alsa.enable = true;
#   hardware.alsa.support32Bit = true;
#   hardware.firmware = [ pkgs.linuxFirmware ];
#   hardware.btrfs.enable = true;
#   hardware.btrfs.autoScrub.enable = true;
#   hardware.btrfs.autoScrub.interval = "weekly";
#   hardware.btrfs.autoScrub.startTime = "03:00";
#   hardware.btrfs.autoScrub.devices = [ "/" ];
#   hardware.btrfs.autoScrub.sendNotifications = true;
#   hardware.btrfs.autoScrub.threshold = 10;
#   hardware.btrfs.autoScrub.runOnBattery = false;
#   hardware.btrfs.autoScrub.verbose = false;
#   hardware.btrfs.autoScrub.zstdCompressionLevel = 3;
#   hardware.btrfs.autoScrub.maxDuration = "2h";
#   hardware.btrfs.autoScrub.exclude = [ ];
#   hardware.btrfs.autoScrub.excludePatterns = [ ];
#   hardware.btrfs.autoScrub.include = [ ];
#   hardware.btrfs.autoScrub.includePatterns = [ ];
#   hardware.btrfs.autoScrub.logFile = "/var/log/btrfs-auto-scrub.log";
#   services.udev.packages = [ pkgs.efibootmgr ];
}


# END /home/elbasel/config/nixos/hardware-configuration.nix

# BEGIN /home/elbasel/config/nixos/modules/boot.nix
{ pkgs, ... }:
{
  boot.loader.efi.canTouchEfiVariables = true;
  boot.kernelPackages = pkgs.linuxPackages_zen;
  boot.loader.systemd-boot.enable = true;
  boot.tmp.cleanOnBoot = true;

  # Kernel modules to be included in the initrd.
  # These modules are loaded early in the boot process, before the root filesystem is mounted.
  # "i915" is for Intel graphics.
  boot.initrd.kernelModules = [
    "i915"
    # "xhci_pci"
    # "nvme"
    # "usb_storage"
    # "sd_mod"
    # "sdhci_pci"
  ];
  # Kernel modules to be loaded automatically after the system has booted.
  # "cgroup_cpuset" is a module related to cgroup cpuset functionality.

  # boot.kernelModules = [
  #   "kvm-intel"
  #   "cgroup_cpuset"
  #   "intel_tcc_cooling"
  #   "intel_lpss_pci"
  #   "i2c_hid_acpi"
  #   "intel_hid_accel"
  #   "nvme"
  # ];

  #boot.extraModulePackages = [ ];

  # boot.kernelParams = [
  #   "i915.enable_guc=3"
  #   "i915.force_probe=46d1"
  #   "intel_iommu=on,kernel_enable=no"
  #   "cgroup_enable=cpuset"
  #   "mitigations=off" # Only if you prioritize performance over security
  #   # "quiet"
  #   "splash"
  #   "rd.systemd.show_status=false"
  #   "rd.udev.log_level=3"
  # ];

  # Custom parameters to be added to the kernel command line.
  # These can control various kernel behaviors or enable specific features.
  # "cgroup_enable=cpuset" enables the cpuset cgroup functionality.
  # boot.kernelParams = [  ];
}

# END /home/elbasel/config/nixos/modules/boot.nix

# BEGIN /home/elbasel/config/nixos/modules/console.nix
{ pkgs, ... }:
{
  console.packages = [ pkgs.terminus_font ];
  console.earlySetup = true;
  console.font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";

  # If set to true, the virtual console keymap will be configured based on the X server keyboard settings.
  # This allows for a consistent keyboard layout between the graphical environment and virtual consoles.
  # console.useXkbConfig = true;
}

# END /home/elbasel/config/nixos/modules/console.nix

# BEGIN /home/elbasel/config/nixos/modules/disabled.nix
{
  # services.xserver.enable = true;
  # services.displayManager.sddm.enable = true;
  # services.desktopManager.plasma6.enable = true;
  # services.greetd.enable = true;
  # services.greetd.vt = 3;
  # programs.regreet.enable = true;
  # security.pam.services.hyprland.enableGnomeKeyring = true;
  # services.gnome.gnome-keyring.enable = true;
  # services.qemuGuest.enable = true;
  # services.spice-vdagentd.enable = true;
  # swapDevices.device = "/swapfile";
  # swapDevices.size = "4G";
  # swapDevices.priority = -1;
  # environment.variables.QT_QPA_PLATFORMTHEME = "qt5ct";
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;
  # security.rtkit.enable = true;
  # services.blueman.enable = true;
}

# END /home/elbasel/config/nixos/modules/disabled.nix

# BEGIN /home/elbasel/config/nixos/modules/environment.nix
{ pkgs, ... }:
{

  environment.sessionVariables.NIXOS_OZONE_WL = "1";

  environment.systemPackages = with pkgs; [
    # === neovim stuff === 
    prettierd
    eslint_d
    nil
    luarocks
    lua5_1
    tree-sitter
    typescript-language-server
    # ===

    git-filter-repo
    python314
    lazygit
    gcc
    brave
    google-chrome
    chromium
    ranger
    vscode
    terminator
    nodePackages_latest.vercel 
    corepack
    nodejs
    git
    gh
    neovim
    firefox-bin
    mpv
    tree
    unzip
    fzf
    tldr
    eza
    dust
    fd
    ripgrep
    silver-searcher
    zsh-completions
    obs-studio
    wget
    postman
    deluge
    ffmpeg
    jq
    bat
    kitty
    starship
    wofi
    cava
    quickemu # vms
    atuin # shell history
    grimblast # screenshot tool
    brightnessctl # cli brightness control
    playerctl # cli media controller
    btop # resource monitor
    acpi # show battery status
    clipse # clipboard manager for Wayland
    swappy # screenshot editing tool
    nil # language server for nix lang
    wl-clipboard # command-line copy/paste for Wayland
    hyprls # hyprland language server

    # pciutils
    # gsettings-qt 
    # komorebi
    # gnome-software
    # xorg.xcursorthemes
    # gsettings-desktop-schemas 
    # gnome.nixos-gsettings-overrides
    # libreoffice-qt6-fresh 
    # net-tools
    # libnotify
    # pamixer
    # yad
    # quickgui
    # networkmanagerapplet
    # dig
    # ayu-theme-gtk
    # gruvbox-kvantum
    # gtk-engine-murrine
    # gruvbox-gtk-theme
    # gnome-themes-extra
    # gnome-calculator
    # gnome-text-editor
    # pavucontrol
    # walker
    # nwg-look
    # hyprcursor
    # swaynotificationcenter
    # seahorse
    # nautilus
    # xfce.xfce4-icon-theme
    # arc-theme
    # satty
    # hyprshot
    # powertop
    # shfmt
    # shellcheck
    # bash-language-server
    # lxqt.lxqt-policykit
    # hyprshell 
    # fnm
    # nixfmt-rfc-style
    # nodejs_24
    # nodejs-slim_24
    # bun
    # typescript
    # typescript-language-server
    # eslint
    # eslint_d
    # prettierd
    # pipx
    # python313
    # python313Packages.yowsup
    # python311Packages.pip
    # zig
    # openconnect_openssl
    # docker-credential-helpers
    # grim
    # vlc
    # webtorrent_desktop
    # eww
    # file
    # mediainfo
    # ddgr
    # traceroute
    # anydesk
    # azure-cli
    # wl-clip-persist
    # hyprpaper
    # hyprpolkitagent
    # kdePackages.dolphin
    # kdePackages.breeze-gtk
    # kdePackages.breeze-icons
    # kdePackages.qt6ct
    # libsForQt5.qt5ct
    # gum
    # peaclock
    # shellcheck
    # shfmt
    # glibc
    # smartmontools
    # lm_sensors
    # neofetch
    # gparted
    # htop
    # glances
    # glow
    # koboldcpp
    # nautilus
    # aider-chat
    # android-tools
    # nmap
    # miniupnpc
    # gupnp-tools
    # python313Packages.websocket-client
    # python313Packages.samsungctl
  ];
  # environment.sessionVariables.LIBVA_DRIVER_NAME = "iHD";
}

# END /home/elbasel/config/nixos/modules/environment.nix

# BEGIN /home/elbasel/config/nixos/modules/fonts.nix
{ pkgs, ... }:
{
  fonts.packages = [
    pkgs.nerd-fonts.jetbrains-mono
    # pkgs.font-awesome
  ];

  # Specifies the font packages to be installed and made available to applications.
  # Fonts listed here are managed by Fontconfig, making them accessible system-wide.
  # fonts.fontconfig.enable = true;
  # fonts.fontconfig.antialias = true;
  # fonts.fontconfig.hinting.enable = true;
  # fonts.fontconfig.hinting.style = "slight";
  # fonts.fontconfig.subpixel.rgba = "rgb";

}

# END /home/elbasel/config/nixos/modules/fonts.nix

# BEGIN /home/elbasel/config/nixos/modules/gnome.nix
{ pkgs, ... }:
{
  services.displayManager.gdm.enable = false;
  services.desktopManager.gnome.enable = true;
  services.gnome.games.enable = false;
  services.desktopManager.gnome.extraGSettingsOverrides = ''
    [org.gnome.mutter]
    experimental-features=['scale-monitor-framebuffer', 'xwayland-native-scaling', 'variable-refresh-rate']
  '';
  services.xserver.displayManager.startx.enable = true;
}

# END /home/elbasel/config/nixos/modules/gnome.nix

# BEGIN /home/elbasel/config/nixos/modules/hardware.nix
{ pkgs, ... }:
{
  hardware.graphics.enable = true;
  #hardware.bluetooth.enable = true;
  #hardware.enableRedistributableFirmware = true;
  #hardware.graphics.package = pkgs.mesa;
  #hardware.graphics.extraPackages = with pkgs; [
  # Provides VA-API hardware acceleration for video encoding/decoding on Intel GPUs.
  #   # Improves performance and efficiency for video playback and processing.
  #  intel-media-driver # For VA-API hardware acceleration on Intel
  #  intel-vaapi-driver
    #vaapiVdpau
  #  intel-compute-runtime
  #  vpl-gpu-rt # newer hardware
  #  intel-ocl
  #   mesa
  #  vulkan-loader
  #  vulkan-validation-layers
    #vaapiIntel         # Older VA-API driver, intel-media-driver is preferred
  #  libvdpau-va-gl     # VDPAU-VA-API backend
  #];
}

# END /home/elbasel/config/nixos/modules/hardware.nix

# BEGIN /home/elbasel/config/nixos/modules/locale.nix
{
  # This option sets the default locale for the system.
  # The locale determines language, character encoding, and cultural conventions (e.g., date/time formatting, number formatting).
  # "en_US.UTF-8" sets the locale to American English with UTF-8 encoding.
  #i18n.defaultLocale = "en_US.UTF-8";

  # This option specifies the list of supported locales that will be generated and made available on the system.
  # By including "en_US.UTF-8/UTF-8", you ensure that the American English locale with UTF-8 encoding is supported.
  # The "/UTF-8" part is a specific format requirement for this option.
  # i18n.supportedLocales = [
  #   "en_US.UTF-8/UTF-8"
  #   "ar_EG.UTF-8/UTF-8"
  # ];
}

# END /home/elbasel/config/nixos/modules/locale.nix

# BEGIN /home/elbasel/config/nixos/modules/networking.nix
{
  networking.hostName = "nixos";
  networking.networkmanager.enable = true;
  networking.nftables.enable = true;
  networking.firewall.trustedInterfaces = [
    "incusbr0"
    "virbr0"
  ];
}

# END /home/elbasel/config/nixos/modules/networking.nix

# BEGIN /home/elbasel/config/nixos/modules/nix.nix
{
  nix.settings.experimental-features = [
    "nix-command"
    "flakes"
  ];
  nix.settings.auto-optimise-store = true; # Automatically optimize the Nix store to save space
}

# END /home/elbasel/config/nixos/modules/nix.nix

# BEGIN /home/elbasel/config/nixos/modules/nixPkgs.nix
{
  nixpkgs.config.allowUnfree = true;
}

# END /home/elbasel/config/nixos/modules/nixPkgs.nix

# BEGIN /home/elbasel/config/nixos/modules/programs.nix
{ pkgs, ... }:
{
  # ! hyprland
  programs.hyprland.enable = true;
  # programs.hyprland.xwayland.enable = false;
  programs.hyprland.withUWSM = true;
  # programs.hyprlock.enable = true;

  # ! zsh
  programs.zsh.enable = true;
  programs.zsh.enableLsColors = true;
  programs.zsh.autosuggestions.enable = true;
  programs.zsh.syntaxHighlighting.enable = true;
  programs.zsh.ohMyZsh.enable = true;
  programs.zsh.ohMyZsh.plugins = [
    "git"
    "z"
    # "you-should-use"
  ];


  #programs.waybar.enable = false;
  #programs.gnupg.agent.enable = false;
  #programs.gnupg.agent.enableSSHSupport = false;

  # programs.dconf.profiles.user.databases = [
  #   {
  #     settings."org/gnome/desktop/interface" = {
  #       gtk-theme = "Adwaita";
  #       icon-theme = "Flat-Remix-Red-Dark";
  #       font-name = "Noto Sans Medium 11";
  #       document-font-name = "Noto Sans Medium 11";
  #       monospace-font-name = "Noto Sans Mono Medium 11";
  #     };
  #   }
  # ];

  # programs.nix-ld.enable = true;
  # programs.nix-ld.libraries = with pkgs; [
  #   stdenv.cc.cc # C/C++ runtime libs
  #   zlib
  #   openssl
  #   # add more if needed (runs `nix-locate` on missing libs)
  # ];

  # programs.uwsm.enable = true;
  # programs.uwsm.waylandCompositors.hyprland.prettyName = "Hyprland";
  # programs.uwsm.waylandCompositors.hyprland.comment = "Hyprland compositor managed by UWSM";
  # programs.uwsm.waylandCompositors.hyprland.binPath = "/run/current-system/sw/bin/Hyprland";
  # programs.uwsm.waylandCompositors.hyprland.binPath = "${pkgs.hyprland}/bin/Hyprland";


  # programs.direnv.enable = true;
  # programs.direnv.silent = false;
  # programs.direnv.loadInNixShell = true;
  # programs.direnv.nix-direnv.enable = true;
  # programs.direnv.enableZshIntegration = true;

  # programs.zoxide.enable = true;
  # programs.zoxide.enableZshIntegration = true;
  # programs.zoxide.flags = [
  # "--cmd cd"
  # ];

  # programs.dconf.enable = true;
}

# END /home/elbasel/config/nixos/modules/programs.nix

# BEGIN /home/elbasel/config/nixos/modules/qt.nix
{
  # qt.style = "kvantum";
  #qt.enable = false;
  # qt.platformTheme = "qt5ct";
}

# END /home/elbasel/config/nixos/modules/qt.nix

# BEGIN /home/elbasel/config/nixos/modules/security.nix
{
  # security.polkit.enable = false;
  # security.rtkit.enable = false;
}

# END /home/elbasel/config/nixos/modules/security.nix

# BEGIN /home/elbasel/config/nixos/modules/services.nix
# { pkgs, ... }:
{
  services.thermald.enable = true;
  services.earlyoom.enable = true;
  services.flatpak.enable = true;
  services.upower.enable = true;
  services.envfs.enable = true;

  services.ollama.enable = true;
  #services.ollama.acceleration = true;
  #services.timesyncd.enable = true;
  #services.libinput.enable = true;
  #services.xserver.enable = false;
  #services.pipewire.enable = true;
  #services.pipewire.pulse.enable = true;
  #services.xserver.displayManager.lightdm.enable = false;
  #services.blueman.enable = true;
  # services.gnome.gnome-keyring.enable = true;
  # security.pam.services.gdm-password.enableGnomeKeyring = true;
  # services.xserver.xkb.layout = "us,ara";
  # services.xserver.xkb.options = "grp:alt_shift_toggle";
  # services.hypridle.enable = true;
  #services.power-profiles-daemon.enable = false;
  # services.xserver.videoDrivers = [ "intel" ];
  # services.xserver.deviceSection = ''
  #   Option "TearFree" "true"
  # '';

  # services.swapspace.enable = false;
  # services.auto-cpufreq.enable = true;
  # services.auto-cpufreq.settings = {
  #   battery = {
  #     governor = "powersave";
  #     energy_performance_preference = "power";
  #     turbo = "never";
  #     platform_profile = "battery";
  #     enable_thresholds = "true";
  #     start_threshold = "20";
  #     stop_threshold = "80";
  #     ideapad_laptop_conservation_mode = "true";
  #   };

  # charger = {
  #   governor = "performance";
  #   energy_performance_preference = "balance_performance";
  #   turbo = "auto";
  #   platform_profile = "performance";
  # };

  # general = {
  #   poll_interval = 4;
  #   sleep_poll_interval = 2;
  # };
  # };
  # services.tlp.enable = true;
  # services.tlp.settings = {
  #   CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
  #   CPU_SCALING_GOVERNOR_ON_AC = "performance";
  # };
  # services.gvfs.enable = true;
}

# END /home/elbasel/config/nixos/modules/services.nix

# BEGIN /home/elbasel/config/nixos/modules/systemd.nix
{ pkgs, ... }:
{
  # systemd.services.flatpak-repo.wantedBy = [ "multi-user.target" ];
  # systemd.services.flatpak-repo.path = [ pkgs.flatpak ];
  # systemd.services.flatpak-repo.script = ''flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'';
  #systemd.services.flatpak-repo = {
  #  wantedBy = [ "multi-user.target" ];
  #  path = [ pkgs.flatpak ];
  #  script = ''flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'';
  #};
}

# END /home/elbasel/config/nixos/modules/systemd.nix

# BEGIN /home/elbasel/config/nixos/modules/system.nix
{
  system.stateVersion = "25.05";
  system.autoUpgrade.enable = true;
}

# END /home/elbasel/config/nixos/modules/system.nix

# BEGIN /home/elbasel/config/nixos/modules/time.nix
{
  time.timeZone = "Africa/Cairo";
}

# END /home/elbasel/config/nixos/modules/time.nix

# BEGIN /home/elbasel/config/nixos/modules/users.nix
{ pkgs, ... }:
{
  users.defaultUserShell = pkgs.zsh;

  users.users.elbasel = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "input"
      "incus-admin"
      "docker"
      "libvirtd"
    ];
  };
}

# END /home/elbasel/config/nixos/modules/users.nix

# BEGIN /home/elbasel/config/nixos/modules/virtualization.nix
{
  virtualisation.docker.enable = true;
  #virtualisation.docker.rootless.enable = true;
  #virtualisation.docker.rootless.setSocketVariable = true;
  #virtualisation.incus.enable = false;
  #virtualisation.libvirtd.enable = false;
  #virtualisation.waydroid.enable = false;
}

# END /home/elbasel/config/nixos/modules/virtualization.nix

# BEGIN /home/elbasel/config/nixos/modules/xdg.nix
{ pkgs, ... }:
{
  # xdg.portal.enable = false;
  #xdg.portal.wlr.enable = false;
  #xdg.portal.extraPortals = [
  #    pkgs.xdg-desktop-portal-gtk
    # pkgs.xdg-desktop-portal-hyprland
    # pkgs.xdg-desktop-portal-gnome
    # pkgs.xdg-desktop-portal
  #];
  #xdg.portal.config.common.default = "gtk";
}

# END /home/elbasel/config/nixos/modules/xdg.nix

# BEGIN /home/elbasel/config/nixos/modules/zram.nix
{ lib, ... }:
{
  # zramSwap.enable = true;
  # swapDevices = lib.mkForce [ ];
  # zramSwap.memoryPercent = 50;
  # zramSwap.algorithm = "zstd";
  # zramSwap.priority = 100;
  # zramSwap.writebackDevice = "/dev/nvme0n1p1"; # If you have fast storage
}

# END /home/elbasel/config/nixos/modules/zram.nix

