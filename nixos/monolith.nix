# monolith.nix - Aggregated NixOS configuration (generated by aggregate.sh)
# Generated on Fri Sep 12 03:04:11 PM EEST 2025

# BEGIN /home/elbasel/config/nixos/hardware-configuration.nix
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  networking.useDHCP = lib.mkDefault true;
  hardware.cpu.intel.updateMicrocode = true;
  swapDevices = [ ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "sdhci_pci" "usb_storage" "sd_mod" ];  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@nix" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
      fsType = "btrfs";
      options = [ "subvol=@home" ];
    };

  fileSystems."/bin" =
    { device = "/usr/bin";
      fsType = "none";
    options = [ "bind" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A60A-EEC2";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

}


# END /home/elbasel/config/nixos/hardware-configuration.nix

# BEGIN /home/elbasel/config/nixos/modules/boot.nix
{ pkgs, ... }:
{
  boot.loader.efi.canTouchEfiVariables = true;
  boot.kernelPackages = pkgs.linuxPackages_zen;
  boot.loader.systemd-boot.enable = true;
  boot.tmp.cleanOnBoot = true;

  boot.initrd.kernelModules = [
    "i915"
  ];




}

# END /home/elbasel/config/nixos/modules/boot.nix

# BEGIN /home/elbasel/config/nixos/modules/console.nix
{ pkgs, ... }:
{
  console.packages = [ pkgs.terminus_font ];
  console.earlySetup = true;
  console.font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";

}

# END /home/elbasel/config/nixos/modules/console.nix

# BEGIN /home/elbasel/config/nixos/modules/disabled.nix
{
}

# END /home/elbasel/config/nixos/modules/disabled.nix

# BEGIN /home/elbasel/config/nixos/modules/environment.nix
{ pkgs, ... }:
{

  environment.sessionVariables.NIXOS_OZONE_WL = "1";

  environment.systemPackages = with pkgs; [
    prettierd
    eslint_d
    nil
    luarocks
    lua5_1
    tree-sitter
    typescript-language-server

    git-filter-repo
    python314
    lazygit
    gcc
    brave
    google-chrome
    chromium
    ranger
    vscode
    terminator
    nodePackages_latest.vercel 
    corepack
    nodejs
    git
    gh
    neovim
    firefox-bin
    mpv
    tree
    unzip
    fzf
    tldr
    eza
    dust
    fd
    ripgrep
    silver-searcher
    zsh-completions
    obs-studio
    wget
    postman
    deluge
    ffmpeg
    jq
    bat
    kitty
    starship
    wofi
    cava
    quickemu # vms
    atuin # shell history
    grimblast # screenshot tool
    brightnessctl # cli brightness control
    playerctl # cli media controller
    btop # resource monitor
    acpi # show battery status
    clipse # clipboard manager for Wayland
    swappy # screenshot editing tool
    nil # language server for nix lang
    wl-clipboard # command-line copy/paste for Wayland
    hyprls # hyprland language server

  ];
}

# END /home/elbasel/config/nixos/modules/environment.nix

# BEGIN /home/elbasel/config/nixos/modules/fonts.nix
{ pkgs, ... }:
{
  fonts.packages = [
    pkgs.nerd-fonts.jetbrains-mono
  ];


}

# END /home/elbasel/config/nixos/modules/fonts.nix

# BEGIN /home/elbasel/config/nixos/modules/gnome.nix
{ pkgs, ... }:
{
  services.displayManager.gdm.enable = false;
  services.desktopManager.gnome.enable = true;
  services.gnome.games.enable = false;
  services.desktopManager.gnome.extraGSettingsOverrides = ''
    [org.gnome.mutter]
    experimental-features=['scale-monitor-framebuffer', 'xwayland-native-scaling', 'variable-refresh-rate']
  '';
  services.xserver.displayManager.startx.enable = true;
}

# END /home/elbasel/config/nixos/modules/gnome.nix

# BEGIN /home/elbasel/config/nixos/modules/hardware.nix
{ pkgs, ... }:
{
  hardware.graphics.enable = true;
}

# END /home/elbasel/config/nixos/modules/hardware.nix

# BEGIN /home/elbasel/config/nixos/modules/locale.nix
{

}

# END /home/elbasel/config/nixos/modules/locale.nix

# BEGIN /home/elbasel/config/nixos/modules/networking.nix
{
  networking.hostName = "nixos";
  networking.networkmanager.enable = true;
  networking.nftables.enable = true;
  networking.firewall.trustedInterfaces = [
    "incusbr0"
    "virbr0"
  ];
}

# END /home/elbasel/config/nixos/modules/networking.nix

# BEGIN /home/elbasel/config/nixos/modules/nix.nix
{
  nix.settings.experimental-features = [
    "nix-command"
    "flakes"
  ];
  nix.settings.auto-optimise-store = true; # Automatically optimize the Nix store to save space
}

# END /home/elbasel/config/nixos/modules/nix.nix

# BEGIN /home/elbasel/config/nixos/modules/nixPkgs.nix
{
  nixpkgs.config.allowUnfree = true;
}

# END /home/elbasel/config/nixos/modules/nixPkgs.nix

# BEGIN /home/elbasel/config/nixos/modules/programs.nix
{ pkgs, ... }:
{
  programs.hyprland.enable = true;
  programs.hyprland.withUWSM = true;

  programs.zsh.enable = true;
  programs.zsh.enableLsColors = true;
  programs.zsh.autosuggestions.enable = true;
  programs.zsh.syntaxHighlighting.enable = true;
  programs.zsh.ohMyZsh.enable = true;
  programs.zsh.ohMyZsh.plugins = [
    "git"
    "z"
  ];









}

# END /home/elbasel/config/nixos/modules/programs.nix

# BEGIN /home/elbasel/config/nixos/modules/qt.nix
{
}

# END /home/elbasel/config/nixos/modules/qt.nix

# BEGIN /home/elbasel/config/nixos/modules/security.nix
{
}

# END /home/elbasel/config/nixos/modules/security.nix

# BEGIN /home/elbasel/config/nixos/modules/services.nix
{
  services.thermald.enable = true;
  services.earlyoom.enable = true;
  services.flatpak.enable = true;
  services.upower.enable = true;
  services.envfs.enable = true;

  services.ollama.enable = true;



}

# END /home/elbasel/config/nixos/modules/services.nix

# BEGIN /home/elbasel/config/nixos/modules/systemd.nix
{ pkgs, ... }:
{
}

# END /home/elbasel/config/nixos/modules/systemd.nix

# BEGIN /home/elbasel/config/nixos/modules/system.nix
{
  system.stateVersion = "25.05";
  system.autoUpgrade.enable = true;
}

# END /home/elbasel/config/nixos/modules/system.nix

# BEGIN /home/elbasel/config/nixos/modules/time.nix
{
  time.timeZone = "Africa/Cairo";
}

# END /home/elbasel/config/nixos/modules/time.nix

# BEGIN /home/elbasel/config/nixos/modules/users.nix
{ pkgs, ... }:
{
  users.defaultUserShell = pkgs.zsh;

  users.users.elbasel = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "input"
      "incus-admin"
      "docker"
      "libvirtd"
    ];
  };
}

# END /home/elbasel/config/nixos/modules/users.nix

# BEGIN /home/elbasel/config/nixos/modules/virtualization.nix
{
  virtualisation.docker.enable = true;
}

# END /home/elbasel/config/nixos/modules/virtualization.nix

# BEGIN /home/elbasel/config/nixos/modules/xdg.nix
{ pkgs, ... }:
{
}

# END /home/elbasel/config/nixos/modules/xdg.nix

# BEGIN /home/elbasel/config/nixos/modules/zram.nix
{ lib, ... }:
{
}

# END /home/elbasel/config/nixos/modules/zram.nix

