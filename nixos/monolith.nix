# monolith.nix - Aggregated NixOS configuration (generated by aggregate.sh)
# Generated on Thu Aug  7 03:10:16 AM EEST 2025

# BEGIN /home/elbasel/config/nixos/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "nvme"
    "usb_storage"
    "sd_mod"
    "sdhci_pci"
  ];
  # boot.initrd.kernelModules = [ ];
  # boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
    fsType = "btrfs";
    options = [ "subvol=@" ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
    fsType = "btrfs";
    options = [ "subvol=@home" ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/2d0bddaf-f5fb-499f-ae88-fb02d3bb4517";
    fsType = "btrfs";
    options = [ "subvol=@nix" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/A60A-EEC2";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  # swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  # hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

# END /home/elbasel/config/nixos/hardware-configuration.nix

# BEGIN /home/elbasel/config/nixos/modules/boot.nix
{ pkgs, ... }:
{
  # Allows NixOS to modify EFI variables in the system's firmware.
  # Enabling this is convenient for automatic boot entry updates,
  # but can sometimes cause issues with buggy firmware.
  boot.loader.efi.canTouchEfiVariables = true;

  boot.loader.systemd-boot.enable = true;

  boot.tmp.cleanOnBoot = true;

  # Kernel modules to be included in the initrd.
  # These modules are loaded early in the boot process, before the root filesystem is mounted.
  # "i915" is for Intel graphics.
  boot.initrd.kernelModules = [
    "i915"
    # "xhci_pci"
    # "nvme"
    # "usb_storage"
    # "sd_mod"
    # "sdhci_pci"
  ];
  # Kernel modules to be loaded automatically after the system has booted.
  # "cgroup_cpuset" is a module related to cgroup cpuset functionality.

  # boot.kernelModules = [
  #   "kvm-intel"
  #   "cgroup_cpuset"
  #   "intel_tcc_cooling"
  #   "intel_lpss_pci"
  #   "i2c_hid_acpi"
  #   "intel_hid_accel"
  #   "nvme"
  # ];

  boot.extraModulePackages = [ ];

  boot.kernelParams = [
    "i915.enable_guc=3"
    "i915.force_probe=46d1"
    "intel_iommu=on,kernel_enable=no"
    "cgroup_enable=cpuset"
    "mitigations=off" # Only if you prioritize performance over security
    # "quiet"
    "splash"
    "rd.systemd.show_status=false"
    "rd.udev.log_level=3"
  ];

  # Custom parameters to be added to the kernel command line.
  # These can control various kernel behaviors or enable specific features.
  # "cgroup_enable=cpuset" enables the cpuset cgroup functionality.
  # boot.kernelParams = [  ];

  # Specifies the kernel package to use.
  # pkgs.linuxPackages_zen refers to a kernel optimized for desktop performance.
  boot.kernelPackages = pkgs.linuxPackages_zen;
}

# END /home/elbasel/config/nixos/modules/boot.nix

# BEGIN /home/elbasel/config/nixos/modules/console.nix
{ pkgs, ... }:
{
  # Specifies a list of packages that provide console fonts, keymaps, and other resources for virtual consoles.
  console.packages = [ pkgs.terminus_font ];

  # If set to true, the virtual console keymap will be configured based on the X server keyboard settings.
  # This allows for a consistent keyboard layout between the graphical environment and virtual consoles.
  console.useXkbConfig = true;

  # If set to true, console setup (font, keymap) is performed early in the boot process.
  # This ensures the console is configured before most services start.
  console.earlySetup = true;

  # Sets the default font for virtual consoles.
  # This can be a font name (if provided by a package in console.packages) or a path to a PSF font file.
  # The example uses a specific Terminus font file.
  console.font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
}

# END /home/elbasel/config/nixos/modules/console.nix

# BEGIN /home/elbasel/config/nixos/modules/disabled.nix
{
  # services.xserver.enable = true;
  # services.displayManager.sddm.enable = true;
  # services.desktopManager.plasma6.enable = true;
  # services.greetd.enable = true;
  # services.greetd.vt = 3;
  # programs.regreet.enable = true;
  # security.pam.services.hyprland.enableGnomeKeyring = true;
  # services.gnome.gnome-keyring.enable = true;
  # services.qemuGuest.enable = true;
  # services.spice-vdagentd.enable = true;
  # swapDevices.device = "/swapfile";
  # swapDevices.size = "4G";
  # swapDevices.priority = -1;
  # environment.variables.QT_QPA_PLATFORMTHEME = "qt5ct";
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;
  # security.rtkit.enable = true;
  # services.blueman.enable = true;
}

# END /home/elbasel/config/nixos/modules/disabled.nix

# BEGIN /home/elbasel/config/nixos/modules/environment.nix
{ pkgs, ... }:
{
  environment.sessionVariables.VDPAU_DRIVER = "va_gl";
  environment.sessionVariables.LIBVA_DRIVER_NAME = "iHD";

  environment.systemPackages = with pkgs; [
    # ! --- Nix & Dev Tools ---
    pciutils
    # new START
    # gsettings-qt # Qt-based settings for GNOME
    # komorebi
    # xorg.xcursorthemes
    # gsettings-desktop-schemas # Schemas for GNOME desktop settings
    # gnome.nixos-gsettings-overrides # NixOS overrides for GNOME settings
    libreoffice-qt6-fresh # office apps
    net-tools
    libnotify
    pamixer
    yad
    cava
    networkmanagerapplet # Applet for managing network connections in GNOME
    dig # network tool
    ayu-theme-gtk # Ayu GTK theme for a clean and modern look
    gruvbox-kvantum # Gruvbox Kvantum theme for a retro groove color scheme
    gtk-engine-murrine # Murrine GTK engine for custom themes
    gruvbox-gtk-theme # Gruvbox GTK theme for a retro groove color scheme
    gnome-themes-extra # Extra GNOME themes
    gnome-calculator # GNOME calculator application
    gnome-text-editor # GNOME text editor
    pavucontrol # PulseAudio volume control GUI
    # walker # A tool for managing and navigating Nix packages and environments.
    nwg-look # A tool for managing GTK themes, icons, and cursors in a user-friendly way.
    swaynotificationcenter
    seahorse # GNOME password manager
    nautilus # GNOME file manager
    xfce.xfce4-icon-theme
    arc-theme
    # hyprshot # A screenshot tool for Hyprland (Wayland) that allows capturing screenshots with various options.
    powertop
    shfmt # format shell files
    shellcheck # sh file checking
    bash-language-server # language server for bash
    lxqt.lxqt-policykit

    # new END
    hyprls # language server for Hyprland, providing code intelligence and autocompletion for Hyprland configuration files.
    nil # Nix language server (LSP) for providing code intelligence for Nix expressions.
    # devenv # A tool for creating declarative, reproducible, and composable developer environments using Nix.
    # fnm
    nixfmt-rfc-style # The official Nix code formatter, adhering to RFC 166 style guidelines, for consistent Nix code.
    corepack # A Node.js tool that manages package manager versions (like npm, yarn, pnpm) for projects.
    # nodejs # JavaScript runtime environment built on Chrome's V8 engine, for executing JavaScript code outside a browser.
    nodejs_24
    # nodejs-slim_24
    bun # A fast all-in-one JavaScript runtime, bundler, transpiler, and package manager.
    # typescript # A superset of JavaScript that adds static typing, enhancing code quality and maintainability.
    # typescript-language-server # A language server that provides TypeScript and JavaScript language features to code editors.
    # eslint # A pluggable and configurable linter tool for identifying and reporting on patterns in JavaScript and TypeScript code.
    # eslint_d # A daemonized version of ESLint that provides faster linting by keeping ESLint running in the background.
    # prettierd # A daemonized version of Prettier, a code formatter, for faster code formatting.
    nodePackages_latest.vercel # The Vercel CLI, used for deploying web projects to the Vercel platform.
    pipx
    python313 # The Python 3.13 interpreter.
    # python313Packages.yowsup # A Python library for creating WhatsApp clients, specifically for Python 3.13.
    # python311Packages.pip # The package installer for Python, used to install and manage Python packages (for Python 3.11 in this case).
    # zig # Programming language and toolchain
    # gcc # GNU Compiler Collection
    git # Distributed version control system
    gh # GitHub CLI tool
    gof5 # Open source F5 BIG-IP VPN client for Linux, MacOS, FreeBSD, Windows
    # openconnect_openssl # OpenConnect VPN client (with OpenSSL)
    #docker-credential-helpers # Docker credential storage helpers

    # ! --- Editors & IDEs ---
    vscode # Visual Studio Code editor
    neovim # Modern Vim-based text editor

    # ! --- Browsers ---
    google-chrome # Web browser by Google
    brave # Privacy-focused web browser
    firefox # Mozilla web browser
    # chromium # Open-source web browser project

    # ! --- Media & Graphics ---
    mpv # Media player
    vlc # Versatile media player
    webtorrent_desktop # Streaming torrent client
    obs-studio # Open source video recording and streaming
    file
    mediainfo

    # ! --- Networking & Remote ---
    ddgr # DuckDuckGo search from the command line
    wget # Network downloader
    traceroute # Network diagnostic tool
    anydesk # Remote desktop application
    postman # API testing tool
    azure-cli # Microsoft Azure command-line interface
    deluge # BitTorrent client

    # ! --- Hyprland & Wayland ---
    wl-clip-persist # Keeps Wayland clipboard after program exit
    # swappy # Image editor for Wayland
    hyprpaper # Fast wallpaper utility for Hyprland (Wayland)
    hyprpolkitagent # Polkit authentication agent for Hyprland, written in QT/QML
    grimblast # Screenshot helper for Hyprland (Wayland)
    wofi # Application launcher for Wayland
    wl-clipboard # Command-line copy/paste for Wayland

    # ! --- KDE & Qt ---
    #kdePackages.dolphin # KDE file manager
    kdePackages.spectacle # KDE screenshot tool
    kdePackages.breeze-gtk # GTK theme for KDE Breeze
    kdePackages.breeze-icons # Icon theme for KDE Breeze
    kdePackages.qt6ct # Qt6 configuration tool
    libsForQt5.qt5ct # Qt5 configuration tool

    # ! --- System Utilities ---
    gum # A tool for creating interactive command-line prompts and menus
    peaclock # A simple, customizable clock for the terminal
    atuin # Command-line shell history manager with search and sync capabilities
    ffmpeg # Multimedia framework for handling video, audio, and other multimedia files
    shellcheck # Shell script analysis tool
    shfmt # Shell script formatter
    jq # Command-line JSON processor
    bat # A cat clone with syntax highlighting and Git integration
    kitty # Terminal emulator
    # glibc # GNU C Library, core C runtime for Linux
    brightnessctl # Control device brightness from the command line
    playerctl # Command-line controller for media players
    smartmontools # Tools for monitoring SMART-enabled hard drives
    lm_sensors # Hardware health monitoring (sensors)
    starship # Cross-shell prompt for minimal, fast, informative shell prompts
    neofetch # System information tool
    gparted # GNOME partition editor
    acpi # Show battery and ACPI information
    btop # Resource monitor
    htop # Interactive process viewer
    glances # Cross-platform system monitoring tool
    tree # Directory listing in tree format
    unzip # Extract compressed .zip files
    fzf # Fuzzy finder for the command line
    tldr # Simplified and community-driven man pages
    eza # Modern replacement for 'ls' command
    dust # More intuitive version of 'du' for disk usage
    fd # Simple, fast and user-friendly alternative to 'find'
    ripgrep # Fast search tool (like grep)
    silver-searcher # Fast code-searching tool, similar to ack
    glow # Terminal markdown reader
    clipse # Terminal-based clipboard manager (TUI) for Unix
    koboldcpp # Easy-to-use AI text-generation software for GGML/GGUF models
    aider-chat # AI coding assistant for working with codebases

    # ! zsh
    zsh-completions # Additional Zsh completions for various commands

    # ! --- hacking ---
    # android-tools
    # nmap # Network exploration tool and security/port scanner
    # miniupnpc # MiniUPnP client and server library
    # gupnp-tools # GUPnP tools for UPnP devices
    # python313Packages.websocket-client
    # python313Packages.samsungctl # A Python library for controlling Samsung Smart TVs.

  ];

}

# END /home/elbasel/config/nixos/modules/environment.nix

# BEGIN /home/elbasel/config/nixos/modules/fonts.nix
{ pkgs, ... }:
{
  # Specifies the font packages to be installed and made available to applications.
  # Fonts listed here are managed by Fontconfig, making them accessible system-wide.
  fonts.fontconfig.enable = true;
  fonts.fontconfig.antialias = true;
  fonts.fontconfig.hinting.enable = true;
  fonts.fontconfig.hinting.style = "slight";
  fonts.fontconfig.subpixel.rgba = "rgb";

  fonts.packages = [
    pkgs.nerd-fonts.jetbrains-mono
    # pkgs.font-awesome
  ];
}

# END /home/elbasel/config/nixos/modules/fonts.nix

# BEGIN /home/elbasel/config/nixos/modules/hardware.nix
{ pkgs, ... }:
{
  hardware.bluetooth.enable = true;
  hardware.enableRedistributableFirmware = true;
  hardware.graphics.enable = true;
  hardware.graphics.package = pkgs.mesa;
  hardware.cpu.intel.updateMicrocode = true;
  hardware.graphics.extraPackages = with pkgs; [
    # Provides VA-API hardware acceleration for video encoding/decoding on Intel GPUs.
    # Improves performance and efficiency for video playback and processing.
    intel-media-driver # For VA-API hardware acceleration on Intel
    intel-vaapi-driver
    vaapiVdpau
    intel-compute-runtime
    vpl-gpu-rt # newer hardware
    intel-ocl
    mesa
    vulkan-loader
    vulkan-validation-layers
    # vaapiIntel         # Older VA-API driver, intel-media-driver is preferred
    # libvdpau-va-gl     # VDPAU-VA-API backend
  ];
}

# END /home/elbasel/config/nixos/modules/hardware.nix

# BEGIN /home/elbasel/config/nixos/modules/locale.nix
{
  # This option sets the default locale for the system.
  # The locale determines language, character encoding, and cultural conventions (e.g., date/time formatting, number formatting).
  # "en_US.UTF-8" sets the locale to American English with UTF-8 encoding.
  i18n.defaultLocale = "en_US.UTF-8";

  # This option specifies the list of supported locales that will be generated and made available on the system.
  # By including "en_US.UTF-8/UTF-8", you ensure that the American English locale with UTF-8 encoding is supported.
  # The "/UTF-8" part is a specific format requirement for this option.
  i18n.supportedLocales = [
    "en_US.UTF-8/UTF-8"
    "ar_EG.UTF-8/UTF-8"
  ];
}

# END /home/elbasel/config/nixos/modules/locale.nix

# BEGIN /home/elbasel/config/nixos/modules/networking.nix
{
  # Enables NetworkManager, a service that provides automatic network connection management.
  networking.hostName = "nixos";
  # It simplifies network configuration for wired, wireless, and mobile broadband connections.
  networking.networkmanager.enable = true;

  # Enables nftables, a modern Linux kernel packet classification framework.
  # It is the successor to iptables and provides more efficient and flexible firewalling capabilities.
  networking.nftables.enable = true;

  # Defines a list of network interfaces that are considered trusted by the firewall.
  # Traffic on these interfaces will bypass firewall restrictions.
  # "incusbr0" and "virbr0" are typically bridge interfaces used by virtualization technologies (Incus/LXD and KVM/libvirt respectively).
  networking.firewall.trustedInterfaces = [
    "incusbr0"
    "virbr0"
  ];
}

# END /home/elbasel/config/nixos/modules/networking.nix

# BEGIN /home/elbasel/config/nixos/modules/nix.nix
{
  # Enables experimental Nix features.
  # - "nix-command": Enables the new `nix` command-line interface. This is a more user-friendly and feature-rich alternative to the older `nix-env`, `nix-build`, etc. commands.
  # - "flakes": Enables Nix Flakes, a new way to manage Nix expressions and their dependencies. Flakes improve reproducibility and composability of Nix projects.
  nix.settings.experimental-features = [
    "nix-command"
    "flakes"
  ];
  nix.settings.auto-optimise-store = true; # Automatically optimize the Nix store to save space
}

# END /home/elbasel/config/nixos/modules/nix.nix

# BEGIN /home/elbasel/config/nixos/modules/nixPkgs.nix
{
  # Allows the installation of packages that are not considered "free" software.
  # This is necessary for installing proprietary software or packages with restrictive licenses.
  # It's a global setting, so be mindful of the implications.
  nixpkgs.config.allowUnfree = true;
}

# END /home/elbasel/config/nixos/modules/nixPkgs.nix

# BEGIN /home/elbasel/config/nixos/modules/power.nix
{
  # This option configures the system's response to lid closure events.
  # Setting it to "ignore" means that closing the laptop lid will not trigger any action (e.g., suspend, hibernate, or shutdown).
  # This is useful if you want to keep the system running with the lid closed, for example, when connected to an external monitor.
  # services.logind.lidSwitch = "ignore";

  # This option enables the UPower service.
  # UPower is a daemon that provides an interface to enumerate power sources on the system,
  # listen to power events, and query history and statistics.
  # It's commonly used by desktop environments to display battery status and manage power settings.
  # services.upower.enable = true;
  # powerManagement.powertop.enable = true;

  # auto-cpufreq is a tool that automatically optimizes CPU speed and power consumption.
  # It monitors CPU usage, temperature, and battery state to adjust CPU frequency and governor settings dynamically.
  # This can help improve battery life without sacrificing performance.
  # services.auto-cpufreq.enable = true;
  # services.thermald.enable = true;
}

# END /home/elbasel/config/nixos/modules/power.nix

# BEGIN /home/elbasel/config/nixos/modules/programs.nix
{ pkgs, ... }:
{
  programs.hyprland.enable = true;
  # programs.hyprland.withUWSM = true;
  programs.hyprlock.enable = true;
  programs.hyprland.xwayland.enable = true;
  # programs.hyprland.withUWSM = true;

  programs.waybar.enable = true;
  programs.gnupg.agent.enable = true;
  programs.gnupg.agent.enableSSHSupport = true;

  programs.dconf.profiles.user.databases = [
    {
      settings."org/gnome/desktop/interface" = {
        gtk-theme = "Adwaita";
        icon-theme = "Flat-Remix-Red-Dark";
        font-name = "Noto Sans Medium 11";
        document-font-name = "Noto Sans Medium 11";
        monospace-font-name = "Noto Sans Mono Medium 11";
      };
    }
  ];

  programs.nix-ld.enable = true;
  programs.nix-ld.libraries = with pkgs; [
    stdenv.cc.cc # C/C++ runtime libs
    zlib
    openssl
    # add more if needed (runs `nix-locate` on missing libs)
  ];

  # programs.uwsm.enable = true;
  # programs.uwsm.waylandCompositors.hyprland.prettyName = "Hyprland";
  # programs.uwsm.waylandCompositors.hyprland.comment = "Hyprland compositor managed by UWSM";
  # programs.uwsm.waylandCompositors.hyprland.binPath = "/run/current-system/sw/bin/Hyprland";
  # programs.uwsm.waylandCompositors.hyprland.binPath = "${pkgs.hyprland}/bin/Hyprland";

  programs.zsh.enable = true;
  programs.zsh.enableLsColors = true;
  programs.zsh.autosuggestions.enable = true;
  programs.zsh.syntaxHighlighting.enable = true;
  programs.zsh.ohMyZsh.enable = true;
  programs.zsh.ohMyZsh.plugins = [
    "git"
    "z"
    # "you-should-use"
  ];

  programs.direnv.enable = true;
  programs.direnv.silent = false;
  programs.direnv.loadInNixShell = true;
  programs.direnv.nix-direnv.enable = true;
  programs.direnv.enableZshIntegration = true;

  # programs.zoxide.enable = true;
  # programs.zoxide.enableZshIntegration = true;
  # programs.zoxide.flags = [
  # "--cmd cd"
  # ];

  programs.dconf.enable = true;
}

# END /home/elbasel/config/nixos/modules/programs.nix

# BEGIN /home/elbasel/config/nixos/modules/qt.nix
{
  qt.style = "kvantum";
  qt.enable = true;
  qt.platformTheme = "qt5ct";
}

# END /home/elbasel/config/nixos/modules/qt.nix

# BEGIN /home/elbasel/config/nixos/modules/security.nix
{
  security.polkit.enable = true;
  security.rtkit.enable = true;
}

# END /home/elbasel/config/nixos/modules/security.nix

# BEGIN /home/elbasel/config/nixos/modules/services.nix
# { pkgs, ... }:
{
  # services.ollama.enable = true;
  # services.ollama.acceleration = false;
  services.timesyncd.enable = true;
  services.libinput.enable = true;
  services.xserver.enable = true;
  services.pipewire.enable = true;
  services.pipewire.pulse.enable = true;
  services.xserver.displayManager.lightdm.enable = false;
  services.blueman.enable = true;
  services.flatpak.enable = true;
  services.gnome.gnome-keyring.enable = true;
  security.pam.services.gdm-password.enableGnomeKeyring = true;
  services.xserver.xkb.layout = "us,ara";
  services.xserver.xkb.options = "grp:alt_shift_toggle";
  services.hypridle.enable = true;
  services.thermald.enable = true;
  services.power-profiles-daemon.enable = false;
  services.xserver.videoDrivers = [ "intel" ];
  services.xserver.deviceSection = ''
    Option "TearFree" "true"
  '';

  services.swapspace.enable = true;
  services.auto-cpufreq.enable = true;
  services.auto-cpufreq.settings = {
    battery = {
      governor = "powersave";
      energy_performance_preference = "power";
      turbo = "never";
      platform_profile = "battery";
      enable_thresholds = "true";
      start_threshold = "20";
      stop_threshold = "80";
      ideapad_laptop_conservation_mode = "true";
    };

    charger = {
      governor = "performance";
      energy_performance_preference = "balance_performance";
      turbo = "auto";
      platform_profile = "performance";
    };

    general = {
      poll_interval = 4;
      sleep_poll_interval = 2;
    };
  };
  # services.tlp.enable = true;
  # services.tlp.settings = {
  #   CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
  #   CPU_SCALING_GOVERNOR_ON_AC = "performance";
  # };
  # services.gvfs.enable = true;
  services.envfs.enable = true;
}

# END /home/elbasel/config/nixos/modules/services.nix

# BEGIN /home/elbasel/config/nixos/modules/systemd.nix
{ pkgs, ... }:
{
  systemd.services.flatpak-repo.wantedBy = [ "multi-user.target" ];
  systemd.services.flatpak-repo.path = [ pkgs.flatpak ];
  systemd.services.flatpak-repo.script = ''flatpak remote-add --if-not-exists flathub https://flathub.org'';
}

# END /home/elbasel/config/nixos/modules/systemd.nix

# BEGIN /home/elbasel/config/nixos/modules/system.nix
{
  system.stateVersion = "24.11";
  system.autoUpgrade.enable = true;
}

# END /home/elbasel/config/nixos/modules/system.nix

# BEGIN /home/elbasel/config/nixos/modules/time.nix
{
  time.timeZone = "Africa/Cairo";
}

# END /home/elbasel/config/nixos/modules/time.nix

# BEGIN /home/elbasel/config/nixos/modules/users.nix
{ pkgs, ... }:
{
  users.defaultUserShell = pkgs.zsh;
  users.users.elbasel = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "input"
      "incus-admin"
      "docker"
      "libvirtd"
    ];
  };
}

# END /home/elbasel/config/nixos/modules/users.nix

# BEGIN /home/elbasel/config/nixos/modules/virtualization.nix
{
  virtualisation.docker.enable = true;
  #virtualisation.docker.rootless.enable = true;
  #virtualisation.docker.rootless.setSocketVariable = true;
  virtualisation.incus.enable = true;
  virtualisation.libvirtd.enable = true;
  virtualisation.waydroid.enable = true;
}

# END /home/elbasel/config/nixos/modules/virtualization.nix

# BEGIN /home/elbasel/config/nixos/modules/xdg.nix
{ pkgs, ... }:
{
  xdg.portal.enable = true;
  xdg.portal.wlr.enable = true;
  xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-hyprland ];
}

# END /home/elbasel/config/nixos/modules/xdg.nix

# BEGIN /home/elbasel/config/nixos/modules/zram.nix
{ lib, ... }:
{
  zramSwap.enable = false;
  # swapDevices = lib.mkForce [ ];
  # zramSwap.memoryPercent = 50;
  # zramSwap.algorithm = "zstd";
  # zramSwap.priority = 100;
  # zramSwap.writebackDevice = "/dev/nvme0n1p1"; # If you have fast storage
}

# END /home/elbasel/config/nixos/modules/zram.nix

